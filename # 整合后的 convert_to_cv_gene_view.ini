# 整合后的 convert_to_cv_gene_view.py 代码解析

该脚本旨在将组织级（或单细胞）数据转换为基因视角格式，用于下游的计算机视觉或机器学习任务。其主要改进包括：

1. **加入真实启动子序列**  
   通过解析 FASTA 格式的启动子序列文件和额外的启动子信息文件，构建转录本与基因的映射关系，并在后续处理中以真实的 DNA 序列作为基因的代表。

2. **增强 ATAC 信号密度到 86.3%**  
   针对 ATAC 数据，通过信号扩散（高斯滤波）、混合以及随机填充等方法，将数据中的非零信号比例提升至目标密度（0.8634），以匹配参考数据的统计特征。

3. **将基因符号转换为 ENSEMBL ID**  
   提供加载基因符号与 ENSEMBL ID 映射文件的功能，并在转换过程中将基因符号替换为标准化的 ENSEMBL ID，确保下游数据一致性。

4. **调整信号强度匹配参考数据分布**  
   通过两种方法（线性缩放和分布匹配），根据参考数据集的统计信息调整 ATAC 信号的强度，使得处理后的数据更符合预期分布。

---

## 1. 数据加载与启动子序列映射

### `load_promoter_sequences(promoter_file, promoter_info)`
- **功能**：  
  读取提供的 FASTA 格式的启动子序列文件，解析每个记录（要求 ID 格式为 `transcript_id|gene_id|gene_name`），同时从额外的启动子信息文件中建立两个映射：
  - **gene_id_to_transcripts**：从基因 ID 到转录本 ID 的映射  
  - **gene_name_to_transcripts**：从基因名称到转录本 ID 的映射

- **实现要点**：  
  - 使用 BioPython 的 `SeqIO.parse` 逐条读取 FASTA 记录  
  - 对启动子信息文件逐行解析，并跳过表头  
  - 输出加载统计及部分示例映射

### `convert_sequence_to_numeric(sequence)`
- **功能**：  
  将 DNA 序列中的碱基转换为数字编码，映射规则为：A→0, G→1, C→2, T→3, N（不确定）也映射为0。

---

## 2. 信号调整与标准化

### ATAC 信号调整

#### `adjust_atac_signals(atac_signals)`
- **功能**：  
  调整输入 ATAC 信号的密度和强度分布，以匹配参考数据集的目标密度（86.34%非零比例）。
- **步骤**：  
  1. 确保输入为二维数组。  
  2. 计算当前信号中非零元素所占比例，并与目标密度比较。  
  3. 若比例过高则通过阈值过滤减少非零点；若比例过低则随机填充零值。  
  4. 将所有非零值映射到 [0, 1] 范围，并确保输出形状正确。

#### `linear_scaling(atac_data, ref_stats)` 与 `distribution_matching(atac_data, ref_stats)`
- **功能**：  
  分别提供两种调整方法：  
  - **线性缩放**：根据当前数据均值与参考均值计算缩放因子，对数据进行线性变换。  
  - **分布匹配**：根据参考数据集的百分位数分布，将当前数据非零值映射到参考分布上，从而使数据的整体信号分布更接近参考数据。

#### `enhance_atac_signal(atac_data, target_ratio=0.863)`
- **功能**：  
  使用混合方法增强 ATAC 信号密度：
  1. 对数据应用高斯滤波（信号扩散）  
  2. 混合原始信号与扩散信号  
  3. 如果非零比例仍低于目标，则随机向零值位置添加信号（基于已有非零值的分布）。

### RNA 信号标准化

#### `normalize_rna_signals(rna_signals)`
- **功能**：  
  对 RNA 信号进行数值标准化处理：
  1. 处理 NaN 值  
  2. 进行 log 转换  
  3. 对正值计算均值与标准差进行 z-score 标准化  
  4. 最终将数值缩放到 [0, 1] 范围

---

## 3. 数据处理与转换

### `process_data(data, promoter_info, promoter_sequences, gene_id_to_transcripts, gene_name_to_transcripts)`
- **功能**：  
  针对输入的包含 `gene_id`、`rna` 和 `atac` 信号的字典数据，逐条处理每个样本：
  1. 根据不同策略（直接匹配、基因ID匹配、转录本匹配、前缀匹配）寻找对应的启动子序列  
  2. 将找到的启动子序列转换为数字编码  
  3. 调整 ATAC 信号与标准化 RNA 信号  
  4. 将结果保存到一个结果字典中，并记录每种匹配方法的使用统计

### 基因符号转换

#### `load_gene_mapping(mapping_file)` 与 `convert_to_ensembl_ids(samples, mapping, ensembl_id_template="ENSG00000000000")`
- **功能**：  
  加载外部映射文件，将基因符号转换为标准的 ENSEMBL ID。  
  - 若基因符号已符合 ENSEMBL 格式则保留；  
  - 否则尝试从映射中查找，若无法映射则生成伪 ID。

---

## 4. 参考信号统计与调整

### `load_reference_atac_stats(reference_file)`
- **功能**：  
  从指定的参考数据文件（通常为 NPZ 格式）加载 ATAC 信号数据，并计算统计指标（均值、标准差、中位数、非零值比例等），同时计算非零值的百分位数分布，用于后续信号匹配。

### 信号调整方法
- **`linear_scaling`** 和 **`distribution_matching`** 两种方法分别实现了线性缩放和分布匹配，以调整 ATAC 信号使之更接近参考数据分布。

---

## 5. 数据转换为基因视角格式

### `convert_tissue_cv_gene_view(...)`
- **功能**：  
  将多组学数据转换为基因视角的 NPZ 格式文件，用于下游任务。
- **主要流程**：
  1. 读取预处理后的 AnnData 数据（从多组学分析结果文件中提取 RNA 与 ATAC 信号）  
  2. 对 RNA 表达数据进行转置，使基因作为样本，计算每个基因的平均表达  
  3. 若提供基因映射文件，则将基因符号转换为 ENSEMBL ID  
  4. 获取或提取 ATAC 数据，并调用 `resize_atac_data` 保证其维度为指定的序列长度  
  5. 根据配置选择是否增强 ATAC 信号密度及调整信号强度（使用 `enhance_atac_signal`、`linear_scaling` 或 `distribution_matching`）  
  6. 加载真实启动子序列，并利用之前构建的映射（直接匹配、基因 ID/名称匹配、前缀匹配等）将每个基因对应的启动子序列转换为数字编码  
  7. 使用 K 折交叉验证（KFold）划分数据，分别保存训练集和测试集到 NPZ 文件中

### `convert_sc_with_borrowed_atac(...)`
- **功能**：  
  针对单细胞数据，借用 multiome 数据中的 ATAC 信号，将单细胞数据转换为基因视角格式。
- **主要流程**：
  1. 对单细胞数据中的每个基因，尝试在 multiome 数据中匹配相应的 ATAC 信号  
  2. 利用启动子序列映射及数字化转换，生成基因对应的 DNA 序列表示  
  3. 将 RNA 表达、ATAC 信号与序列数据整合后，通过交叉验证划分数据并保存

---

## 6. 命令行接口与测试

### `main()`
- **功能**：  
  利用 `argparse` 定义命令行参数，支持指定输出目录、序列长度、交叉验证折数、启动子文件、基因映射文件、参考 ATAC 文件等。  
  根据传入参数判断是处理组织数据（多组学）还是单细胞数据，并调用相应的转换函数。


---

## 总结

该脚本整合了多个步骤，旨在将多组学或单细胞数据转换为“基因视角”数据格式。主要改进点包括：
- 利用真实启动子序列替换随机生成的序列，从而获得更准确的基因序列表示。
- 增强 ATAC 信号密度至目标比例（约 86.3%），并通过线性缩放或分布匹配调整信号强度，使数据更符合参考分布。
- 将基因符号转换为标准的 ENSEMBL ID，以确保数据的一致性和兼容性。
- 采用 K 折交叉验证划分数据，方便下游模型训练和评估。

整体而言，该代码实现了从原始数据预处理到特征转换，再到交叉验证数据集划分的完整流程，为后续的机器学习或计算机视觉任务提供了经过改进和标准化的数据输入。